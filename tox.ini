# Tox configuration for RAG templates framework
# Multi-environment testing configuration

[tox]
# Python versions to test against
envlist = 
    py{38,39,310,311}
    lint
    type-check
    security
    docs
    coverage

# Minimum tox version
minversion = 4.0

# Skip missing interpreters
skip_missing_interpreters = true

# Isolated builds
isolated_build = true

[testenv]
# Test environment configuration
deps =
    pytest>=7.0
    pytest-asyncio>=0.21
    pytest-cov>=4.0
    pytest-mock>=3.10
    pytest-xdist>=3.0
    pytest-timeout>=2.1
    coverage[toml]>=7.0
    factory-boy>=3.2
    freezegun>=1.2
    responses>=0.23

# Install package in development mode
usedevelop = true

# Environment variables
setenv =
    PYTHONPATH = {toxinidir}
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    PY_COLORS = 1

# Commands to run
commands =
    pytest {posargs:tests/} \
        --cov=src \
        --cov=iris_rag \
        --cov=mem0_integration \
        --cov-report=term-missing \
        --cov-report=xml:{toxworkdir}/coverage-{envname}.xml \
        --cov-report=html:{toxworkdir}/htmlcov-{envname} \
        --junit-xml={toxworkdir}/junit-{envname}.xml

# Pass through environment variables
passenv = 
    CI
    GITHUB_*
    PYTEST_*
    OPENAI_API_KEY
    ANTHROPIC_API_KEY
    DATABASE_URL
    REDIS_URL

[testenv:lint]
# Linting environment
deps =
    black>=23.0
    isort>=5.12
    flake8>=6.0
    flake8-docstrings>=1.7
    flake8-import-order>=0.18
    flake8-bugbear>=23.0
    pylint>=2.17

commands =
    black --check --diff src iris_rag mem0_integration tests
    isort --check-only --diff src iris_rag mem0_integration tests
    flake8 src iris_rag mem0_integration tests
    pylint src iris_rag mem0_integration

[testenv:format]
# Code formatting environment
deps =
    black>=23.0
    isort>=5.12

commands =
    black src iris_rag mem0_integration tests
    isort src iris_rag mem0_integration tests

[testenv:type-check]
# Type checking environment
deps =
    mypy>=1.5
    types-PyYAML
    types-requests
    types-redis
    types-setuptools

commands =
    mypy src iris_rag mem0_integration

[testenv:security]
# Security scanning environment
deps =
    bandit[toml]>=1.7
    safety>=2.3
    pip-audit>=2.6

commands =
    bandit -r src iris_rag mem0_integration
    safety check
    pip-audit

[testenv:docs]
# Documentation building environment
deps =
    mkdocs>=1.5
    mkdocs-material>=9.0
    mkdocs-mermaid2-plugin>=1.1
    sphinx>=7.0
    sphinx-autodoc-typehints>=1.24
    sphinx-rtd-theme>=1.3

commands =
    mkdocs build --strict
    sphinx-build -W -b html docs docs/_build/html

[testenv:coverage]
# Coverage reporting environment
deps =
    coverage[toml]>=7.0

commands =
    coverage combine {toxworkdir}/.coverage.*
    coverage report --fail-under=80
    coverage html -d {toxworkdir}/htmlcov-combined
    coverage xml -o {toxworkdir}/coverage-combined.xml

depends = py{38,39,310,311}

[testenv:benchmark]
# Performance benchmarking environment
deps =
    pytest-benchmark>=4.0
    memory-profiler>=0.61

commands =
    pytest tests/benchmarks/ \
        --benchmark-only \
        --benchmark-json={toxworkdir}/benchmark.json

[testenv:integration]
# Integration testing environment
deps =
    {[testenv]deps}
    pytest-docker>=2.0
    docker-compose>=1.29

setenv =
    {[testenv]setenv}
    PYTEST_MARKERS = integration

commands =
    pytest tests/integration/ {posargs} \
        --cov=src \
        --cov=iris_rag \
        --cov=mem0_integration \
        --cov-report=term-missing

[testenv:e2e]
# End-to-end testing environment
deps =
    {[testenv]deps}
    pytest-docker>=2.0
    selenium>=4.0

setenv =
    {[testenv]setenv}
    PYTEST_MARKERS = e2e

commands =
    pytest tests/e2e/ {posargs} \
        --tb=short

[testenv:dev]
# Development environment
deps =
    {[testenv]deps}
    {[testenv:lint]deps}
    {[testenv:type-check]deps}
    {[testenv:docs]deps}
    jupyter>=1.0
    ipython>=8.0

commands =
    python --version
    pip list

[flake8]
# Flake8 configuration
max-line-length = 100
extend-ignore = 
    E203,  # whitespace before ':'
    E501,  # line too long (handled by black)
    W503,  # line break before binary operator
    F401,  # imported but unused (handled by isort)

exclude =
    .git,
    __pycache__,
    .tox,
    .venv,
    venv,
    .eggs,
    *.egg,
    build,
    dist,
    docs,
    .pytest_cache

per-file-ignores =
    __init__.py:F401
    tests/*:D100,D101,D102,D103,D104

[isort]
# isort configuration
profile = black
multi_line_output = 3
line_length = 100
known_first_party = src,iris_rag,mem0_integration
known_third_party = pytest,numpy,pandas

[mypy]
# MyPy configuration
python_version = 3.8
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false

[coverage:run]
# Coverage configuration (supplements .coveragerc)
parallel = true
source = src,iris_rag,mem0_integration

[coverage:report]
# Coverage reporting
skip_covered = false
show_missing = true
fail_under = 80

[bandit]
# Bandit security configuration
exclude_dirs = tests
skips = B101,B601