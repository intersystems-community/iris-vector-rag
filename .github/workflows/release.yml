name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.10"
  POETRY_VERSION: "1.6.1"

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract version from tag or input
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            if [[ $VERSION =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"
          
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi

  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate-version
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: release-venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        run: |
          poetry install --with dev,test
          
      - name: Run full test suite
        run: |
          poetry run pytest tests/ -v --cov=src --cov=iris_rag --cov=mem0_integration
          
      - name: Build package
        run: |
          poetry build
          
      - name: Test package installation
        run: |
          pip install dist/*.whl
          python -c "import iris_rag; import mem0_integration; print('Package installation successful')"

  security-check:
    name: Security Check for Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-version
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Install dependencies
        run: |
          poetry install --with dev
          
      - name: Run security checks
        run: |
          poetry run bandit -r . -x tests/ -f json -o bandit-report.json
          poetry run safety check --json --output safety-report.json
          
      - name: Upload security reports
        uses: actions/upload-artifact@v5
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build-assets:
    name: Build Release Assets
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-version, build-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Update version in pyproject.toml
        run: |
          poetry version ${{ needs.validate-version.outputs.version }}
          
      - name: Install dependencies
        run: |
          poetry install --with dev
          
      - name: Build package
        run: |
          poetry build
          
      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: release-assets
          path: |
            dist/*
            
  build-docker-release:
    name: Build Release Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validate-version, build-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-version.outputs.version }}
            
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          target: full
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  generate-changelog:
    name: Generate Release Changelog
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-version
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Generate changelog
        id: changelog
        run: |
          pip install gitpython
          python scripts/ci/generate-changelog.py \
            --version "${{ needs.validate-version.outputs.version }}" \
            --output changelog.md
          
          # Read changelog for GitHub release
          CHANGELOG=$(cat changelog.md)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Upload changelog
        uses: actions/upload-artifact@v5
        with:
          name: changelog
          path: changelog.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-version, build-assets, generate-changelog, security-check]
    
    steps:
      - name: Download release assets
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: dist/
          
      - name: Download changelog
        uses: actions/download-artifact@v3
        with:
          name: changelog
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: Release v${{ needs.validate-version.outputs.version }}
          body_path: changelog.md
          prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
          files: |
            dist/*
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release, build-assets]
    if: "!needs.validate-version.outputs.is_prerelease"
    environment: pypi-release
    
    steps:
      - name: Download release assets
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: dist/

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release, build-assets]
    if: needs.validate-version.outputs.is_prerelease
    environment: test-pypi-release
    
    steps:
      - name: Download release assets
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: dist/
          
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
          packages_dir: dist/

  update-documentation:
    name: Update Release Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [create-release, validate-version]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Install dependencies
        run: |
          poetry install --with docs
          
      - name: Update version in documentation
        run: |
          python scripts/ci/update-docs-version.py \
            --version "${{ needs.validate-version.outputs.version }}"
            
      - name: Build documentation
        run: |
          poetry run mkdocs build
          
      - name: Deploy documentation
        run: |
          # Deploy updated documentation
          echo "Deploying documentation for version ${{ needs.validate-version.outputs.version }}"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [create-release, validate-version]
    if: always()
    
    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            :rocket: Release v${{ needs.validate-version.outputs.version }} has been published!
            
            :package: PyPI: https://pypi.org/project/rag-templates/
            :octocat: GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.validate-version.outputs.version }}
            :books: Documentation: https://docs.rag-templates.dev
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            :x: Release v${{ needs.validate-version.outputs.version }} failed!
            
            Please check the workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release, validate-version]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create post-release branch
        if: "!needs.validate-version.outputs.is_prerelease"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create and switch to post-release branch
          git checkout -b post-release-v${{ needs.validate-version.outputs.version }}
          
          # Bump version to next development version
          python scripts/ci/bump-dev-version.py \
            --current-version "${{ needs.validate-version.outputs.version }}"
            
          # Commit changes
          git add -A
          git commit -m "chore: bump version to next development version"
          git push origin post-release-v${{ needs.validate-version.outputs.version }}
          
          # Create PR for version bump
          gh pr create \
            --title "chore: bump version to next development version" \
            --body "Automated version bump after release v${{ needs.validate-version.outputs.version }}" \
            --base main \
            --head post-release-v${{ needs.validate-version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}