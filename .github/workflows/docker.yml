name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        target: [base, api, worker, full]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.target }}
            type=ref,event=pr,suffix=-${{ matrix.target }}
            type=semver,pattern={{version}},suffix=-${{ matrix.target }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.target }}
            type=sha,suffix=-${{ matrix.target }}
          flavor: |
            latest=auto
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: Test Docker image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }} \
            python -c "
            try:
              import iris_rag
              import mem0_integration
              print('✓ All imports successful')
            except ImportError as e:
              print(f'✗ Import failed: {e}')
              exit(1)
            "
            
      - name: Run security scan on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.target }}.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.target }}.sarif'

  multi-arch-build:
    name: Multi-Architecture Build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
          flavor: |
            latest=auto
            
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: full
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64,linux/arm/v7

  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build images for compose
        run: |
          docker-compose -f docker-compose.test.yml build
          
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30
          
      - name: Run integration tests against compose
        run: |
          docker-compose -f docker-compose.test.yml exec -T app \
            pytest tests/integration/ -v --tb=short
            
      - name: Check service health
        run: |
          docker-compose -f docker-compose.test.yml ps
          docker-compose -f docker-compose.test.yml logs
          
      - name: Stop test environment
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  performance-test:
    name: Docker Performance Test
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run performance benchmarks
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/benchmarks:/app/benchmarks \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-full \
            python scripts/ci/run-benchmarks.py --docker
            
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: docker-benchmark-results
          path: benchmarks/results/

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [multi-arch-build, docker-compose-test]
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true