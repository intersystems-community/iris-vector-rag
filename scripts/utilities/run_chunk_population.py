import sys
import os
import logging

# Add project root to path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from tools.chunking.enhanced_chunking_service import EnhancedDocumentChunkingService
from common.utils import get_embedding_func # Needed by EnhancedDocumentChunkingService constructor

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def main():
    logger.info("ðŸš€ Starting Document Chunk Population...")
    
    embedding_func = get_embedding_func() 
    if not embedding_func:
        logger.error("Failed to initialize embedding function. Aborting.")
        return

    # The EnhancedDocumentChunkingService constructor takes embedding_func
    chunking_service = EnhancedDocumentChunkingService(embedding_func=embedding_func)
    
    # Process documents (e.g., up to 1000, matching SourceDocuments)
    # The process_documents_at_scale method itself gets a connection.
    # It will read from RAG.SourceDocuments and store chunks in RAG.DocumentChunks
    logger.info("Processing documents from RAG.SourceDocuments to create and store chunks...")
    results = chunking_service.process_documents_at_scale(limit=1000, batch_size=50) 
    
    logger.info("Chunk Population Results:")
    logger.info(f"  Documents Processed by chunker: {results.get('processed_documents')}")
    # This 'total_chunks_created' is based on chunks generated, 
    # actual stored count depends on store_chunks success within the service.
    logger.info(f"  Total Chunks Generated by service: {results.get('total_chunks_created')}") 
    logger.info(f"  Processing Time (ms for chunking logic): {results.get('processing_time_ms')}")
    if results.get("errors"):
        logger.error("Errors encountered during chunk population processing:")
        for err in results["errors"]:
            logger.error(f"  - {err}")
    
    logger.info("âœ… Document Chunk Population Script Finished.")

if __name__ == "__main__":
    main()