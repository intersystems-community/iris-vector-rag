{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://rag-templates.example.com/schemas/base_config.json",
  "title": "Base Configuration Schema",
  "description": "JSON schema for validating base RAG system configuration",
  "type": "object",
  "properties": {
    "metadata": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+\\.\\d+$",
          "description": "Configuration version"
        },
        "schema_version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+$",
          "description": "Schema version for compatibility checking"
        },
        "profile": {
          "type": "string",
          "description": "Configuration profile name"
        },
        "description": {
          "type": "string",
          "description": "Configuration description"
        }
      },
      "required": ["version", "schema_version"],
      "additionalProperties": false
    },
    "database": {
      "type": "object",
      "properties": {
        "iris": {
          "type": "object",
          "properties": {
            "host": {
              "type": "string",
              "description": "IRIS database host"
            },
            "port": {
              "type": "integer",
              "minimum": 1,
              "maximum": 65535,
              "description": "IRIS database port"
            },
            "namespace": {
              "type": "string",
              "description": "IRIS namespace"
            },
            "username": {
              "type": "string",
              "description": "Database username"
            },
            "password": {
              "type": "string",
              "description": "Database password"
            }
          },
          "required": ["host", "port", "namespace", "username", "password"],
          "additionalProperties": false
        }
      },
      "required": ["iris"],
      "additionalProperties": false
    },
    "storage": {
      "type": "object",
      "properties": {
        "data_directory": {
          "type": "string",
          "description": "Directory for storing data files"
        },
        "cache_directory": {
          "type": "string",
          "description": "Directory for cache files"
        }
      },
      "required": ["data_directory"],
      "additionalProperties": false
    },
    "vector_index": {
      "type": "object",
      "properties": {
        "dimension": {
          "type": "integer",
          "minimum": 1,
          "maximum": 4096,
          "description": "Vector dimension"
        },
        "metric": {
          "type": "string",
          "enum": ["cosine", "euclidean", "dot_product"],
          "description": "Distance metric for vector similarity"
        }
      },
      "required": ["dimension"],
      "additionalProperties": false
    },
    "embeddings": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string",
          "description": "Embedding model name"
        },
        "dimension": {
          "type": "integer",
          "minimum": 1,
          "maximum": 4096,
          "description": "Embedding dimension"
        },
        "provider": {
          "type": "string",
          "enum": ["openai", "huggingface", "sentence_transformers"],
          "description": "Embedding provider"
        }
      },
      "required": ["model", "dimension"],
      "additionalProperties": false
    },
    "llm": {
      "type": "object",
      "properties": {
        "model": {
          "type": "string",
          "description": "LLM model name"
        },
        "provider": {
          "type": "string",
          "enum": ["openai", "anthropic", "huggingface"],
          "description": "LLM provider"
        },
        "temperature": {
          "type": "number",
          "minimum": 0,
          "maximum": 2,
          "description": "Generation temperature"
        },
        "max_tokens": {
          "type": "integer",
          "minimum": 1,
          "maximum": 8192,
          "description": "Maximum tokens in response"
        }
      },
      "required": ["model", "provider"],
      "additionalProperties": false
    },
    "logging": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string",
          "enum": ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
          "description": "Logging level"
        },
        "format": {
          "type": "string",
          "description": "Log format string"
        }
      },
      "additionalProperties": false
    },
    "security": {
      "type": "object",
      "properties": {
        "api_key_file": {
          "type": "string",
          "description": "Path to API key file"
        },
        "encryption_enabled": {
          "type": "boolean",
          "description": "Whether to enable encryption"
        }
      },
      "additionalProperties": false
    },
    "performance": {
      "type": "object",
      "properties": {
        "batch_size": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "description": "Batch size for processing"
        },
        "max_workers": {
          "type": "integer",
          "minimum": 1,
          "maximum": 32,
          "description": "Maximum number of worker threads"
        },
        "timeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Request timeout in seconds"
        }
      },
      "additionalProperties": false
    },
    "sample_data": {
      "type": "object",
      "properties": {
        "document_count": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10000,
          "description": "Number of sample documents to load"
        },
        "source": {
          "type": "string",
          "enum": ["pmc", "synthetic", "custom"],
          "description": "Source of sample data"
        }
      },
      "additionalProperties": false
    },
    "mcp_server": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether MCP server is enabled"
        },
        "port": {
          "type": "integer",
          "minimum": 1024,
          "maximum": 65535,
          "description": "MCP server port"
        },
        "tools": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "basic",
              "crag",
              "hyde",
              "graphrag",
              "hybrid_ifind",
              "colbert",
              "noderag",
              "sqlrag",
              "health_check",
              "list_techniques",
              "performance_metrics"
            ]
          },
          "description": "List of enabled MCP tools"
        }
      },
      "additionalProperties": false
    }
  },
  "required": ["database", "storage", "vector_index", "embeddings", "llm"],
  "additionalProperties": false
}