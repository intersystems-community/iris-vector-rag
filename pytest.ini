[tool:pytest]
# Pytest configuration for RAG templates framework

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Exclude incomplete/future feature tests
norecursedirs = .git .venv venv node_modules __pycache__ .pytest_cache htmlcov future_features

# Test execution and coverage options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --show-capture=no
    --durations=10
    --color=yes
    --doctest-modules
    --doctest-continue-on-failure
    --cov=src
    --cov=iris_rag
    --cov=mem0_integration
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-branch
    --cov-fail-under=80
    -p no:randomly

# Markers
markers =
    unit: Unit tests - test individual components in isolation
    integration: Integration tests - test component interactions
    e2e: End-to-end tests - test complete user workflows
    slow: Tests that take a long time to run
    requires_docker: Tests that require Docker to be running
    requires_internet: Tests that require internet connection
    requires_database: Tests that require database connection
    requires_redis: Tests that require Redis connection
    requires_llm: Tests that require LLM API access
    requires_llm_api: Tests that require LLM API access (alias for requires_llm)
    requires_vector_store: Tests that require vector store access
    requires_backend_mode: Tests that require specific IRIS backend mode (community or enterprise)
    benchmark: Performance benchmark tests
    security: Security-related tests
    smoke: Basic smoke tests
    contract: Contract tests that define expected behavior (must fail before implementation)
    good_errors: Tests with exemplary error messages
    error_handling: Error handling and diagnostic message validation tests (Feature 036)
    fallback: Fallback mechanism validation tests (Feature 036)
    dimension: Embedding dimension validation tests (Feature 036)
    basic_rag: Tests for BasicRAG pipeline (Feature 036)
    crag: Tests for CRAG pipeline (Feature 036)
    basic_rerank: Tests for BasicRerankRAG pipeline (Feature 036)
    pylate_colbert: Tests for PyLateColBERT pipeline (Feature 036)

# Asyncio configuration
asyncio_mode = auto

# Minimum Python version
minversion = 6.0

# Warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Test timeout (in seconds)
timeout = 300
timeout_method = thread

# Cache
cache_dir = .pytest_cache

# Parallel execution (when using pytest-xdist)
# Uncomment the following line to run tests in parallel
# addopts = -n auto

# Plugin registration (Feature 026 + Feature 028)
plugins =
    tests.plugins.coverage_warnings
    tests.plugins.error_message_validator
    tests.plugins.tdd_compliance
    tests.plugins.contract_test_marker

# JUnit XML output for CI/CD
junit_suite_name = rag-templates-test-suite
junit_logging = system-out
junit_log_passing_tests = false