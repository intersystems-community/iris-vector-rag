-- Complete RAG Database Schema with All Indexes
-- This script creates all tables and indexes for a fresh RAG database setup

-- =====================================================
-- 1. MAIN DOCUMENT STORAGE
-- =====================================================

DROP TABLE IF EXISTS RAG.SourceDocuments CASCADE;
CREATE TABLE RAG.SourceDocuments (
    doc_id VARCHAR(255) PRIMARY KEY,
    text_content TEXT,
    metadata TEXT,
    embedding VECTOR(FLOAT, 384),
    created_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for SourceDocuments
CREATE INDEX idx_hnsw_source_embedding ON RAG.SourceDocuments (embedding) AS HNSW(M=16, efConstruction=200, Distance='COSINE');
CREATE INDEX idx_source_docs_created ON RAG.SourceDocuments (created_timestamp);

-- =====================================================
-- 2. DOCUMENT CHUNKING TABLES
-- =====================================================

DROP TABLE IF EXISTS RAG.DocumentChunks CASCADE;
CREATE TABLE RAG.DocumentChunks (
    id VARCHAR(255) PRIMARY KEY,
    chunk_id VARCHAR(255),
    doc_id VARCHAR(255),
    chunk_text TEXT,
    chunk_embedding VECTOR(DOUBLE, 384),
    chunk_index INTEGER,
    chunk_type VARCHAR(100),
    metadata TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (doc_id) REFERENCES RAG.SourceDocuments(doc_id)
);

-- Indexes for DocumentChunks
CREATE INDEX idx_chunks_doc_id ON RAG.DocumentChunks (doc_id);
CREATE INDEX idx_chunks_type ON RAG.DocumentChunks (chunk_type);
CREATE INDEX idx_hnsw_chunk_embedding ON RAG.DocumentChunks (chunk_embedding) AS HNSW(M=16, efConstruction=200, Distance='COSINE');

-- =====================================================
-- 3. GRAPHRAG ENTITY AND RELATIONSHIP TABLES
-- =====================================================

DROP TABLE IF EXISTS RAG.EntityRelationships CASCADE;
DROP TABLE IF EXISTS RAG.Entities CASCADE;

CREATE TABLE RAG.Entities (
    entity_id VARCHAR(255) PRIMARY KEY,
    entity_name VARCHAR(1000) NOT NULL,
    entity_type VARCHAR(255) NOT NULL,
    source_doc_id VARCHAR(255) NOT NULL,
    description TEXT NULL,
    embedding VECTOR(FLOAT, 384) NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (source_doc_id) REFERENCES RAG.SourceDocuments(doc_id) ON DELETE CASCADE
);

-- Indexes for Entities
CREATE INDEX idx_entities_name_lower ON RAG.Entities (LOWER(entity_name));
CREATE INDEX idx_entities_type ON RAG.Entities (entity_type);
CREATE INDEX idx_entities_source_doc ON RAG.Entities (source_doc_id);
CREATE INDEX idx_hnsw_entities_embedding ON RAG.Entities (embedding) AS HNSW(M=16, efConstruction=200, Distance='COSINE');

CREATE TABLE RAG.EntityRelationships (
    relationship_id VARCHAR(255) PRIMARY KEY,
    source_entity_id VARCHAR(255) NOT NULL,
    target_entity_id VARCHAR(255) NOT NULL,
    relationship_type VARCHAR(255) NOT NULL,
    metadata TEXT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (source_entity_id) REFERENCES RAG.Entities(entity_id) ON DELETE CASCADE,
    FOREIGN KEY (target_entity_id) REFERENCES RAG.Entities(entity_id) ON DELETE CASCADE
);

-- Indexes for EntityRelationships
CREATE INDEX idx_rel_source ON RAG.EntityRelationships (source_entity_id);
CREATE INDEX idx_rel_target ON RAG.EntityRelationships (target_entity_id);

-- =====================================================
-- 4. IRIS GRAPH CORE TABLES FOR HYBRID SEARCH
-- =====================================================
-- These tables enable advanced hybrid search capabilities with RRF fusion
-- when the iris_graph_core module is available

-- RDF-style entity labels/types
DROP TABLE IF EXISTS rdf_labels CASCADE;
CREATE TABLE rdf_labels (
    s      VARCHAR(256) NOT NULL,
    label  VARCHAR(128) NOT NULL
);

-- Indexes for entity label lookup performance
CREATE INDEX idx_labels_label_s ON rdf_labels(label, s);
CREATE INDEX idx_labels_s_label ON rdf_labels(s, label);

-- Entity properties (key-value pairs)
DROP TABLE IF EXISTS rdf_props CASCADE;
CREATE TABLE rdf_props (
    s      VARCHAR(256) NOT NULL,
    key    VARCHAR(128) NOT NULL,
    val    VARCHAR(4000)
);

-- Indexes for property lookup performance
CREATE INDEX idx_props_s_key ON rdf_props(s, key);
CREATE INDEX idx_props_key_val ON rdf_props(key, val);

-- Graph relationships with JSON metadata
DROP TABLE IF EXISTS rdf_edges CASCADE;
CREATE TABLE rdf_edges (
    edge_id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    s          VARCHAR(256) NOT NULL,
    p          VARCHAR(128) NOT NULL,
    o_id       VARCHAR(256) NOT NULL,
    qualifiers JSON
);

-- Indexes for graph traversal performance
CREATE INDEX idx_edges_s_p ON rdf_edges(s, p);
CREATE INDEX idx_edges_p_oid ON rdf_edges(p, o_id);
CREATE INDEX idx_edges_s ON rdf_edges(s);

-- Optimized vector embeddings table for HNSW performance
DROP TABLE IF EXISTS kg_NodeEmbeddings_optimized CASCADE;
CREATE TABLE kg_NodeEmbeddings_optimized (
    id   VARCHAR(256) PRIMARY KEY,
    emb  VECTOR(FLOAT, 384) NOT NULL
);

-- HNSW index for high-performance vector search
-- Community Edition compatible (no ACORN=1)
CREATE INDEX HNSW_NodeEmb_Optimized ON kg_NodeEmbeddings_optimized(emb) AS HNSW(M=16, efConstruction=200, Distance='COSINE');

-- =====================================================
-- 5. OPTIONAL: LICENSED IRIS FEATURES
-- =====================================================
-- For users with licensed IRIS (not Community Edition):
--
-- 1. Replace the HNSW index above with ACORN=1 optimization:
-- DROP INDEX HNSW_NodeEmb_Optimized;
-- CREATE INDEX HNSW_NodeEmb_Optimized ON kg_NodeEmbeddings_optimized(emb) AS HNSW(M=16, efConstruction=200, Distance='COSINE', ACORN=1);
--
-- 2. Update docker-compose.yml to use intersystemsdc/iris-ml:latest instead of iris-community:latest
--
-- See iris_rag/config/default_config.yaml for configuration options:
-- Set try_acorn: true and community_edition_compatible: false for licensed features

-- =====================================================
-- 6. SCHEMA METADATA TABLE
-- =====================================================
-- Used by SchemaManager for tracking schema versions and migrations

DROP TABLE IF EXISTS RAG.SchemaMetadata CASCADE;
CREATE TABLE RAG.SchemaMetadata (
    table_name VARCHAR(255) NOT NULL,
    schema_version VARCHAR(50) NOT NULL,
    vector_dimension INTEGER,
    embedding_model VARCHAR(255),
    configuration VARCHAR(MAX),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (table_name)
);