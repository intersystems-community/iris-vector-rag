# WebSocket Event Schemas
# FR-025 to FR-028: Real-time streaming via WebSocket

paths:
  /ws/query:
    get:
      summary: WebSocket endpoint for streaming query responses
      description: |
        Establish WebSocket connection for real-time query streaming.

        FR-025: System MUST support WebSocket connections for real-time streaming
        FR-026: System MUST stream incremental query results as processing progresses
        FR-028: System MUST use JSON-based event streaming protocol
      operationId: websocketQuery
      tags:
        - WebSocket
      parameters:
        - name: Upgrade
          in: header
          required: true
          schema:
            type: string
            enum: [websocket]
        - name: Connection
          in: header
          required: true
          schema:
            type: string
            enum: [Upgrade]
      responses:
        '101':
          description: Switching Protocols - WebSocket connection established
        '400':
          description: Invalid WebSocket upgrade request
        '401':
          description: Authentication failed (API key required in initial message)

components:
  schemas:
    # Client → Server messages
    WebSocketQueryRequest:
      type: object
      required:
        - api_key
        - query
        - pipeline
      properties:
        api_key:
          type: string
          description: Base64-encoded API key (id:secret)
        query:
          type: string
          minLength: 1
          maxLength: 10000
        pipeline:
          type: string
          enum: [basic, basic_rerank, crag, graphrag, pylate_colbert]
        parameters:
          type: object
          additionalProperties: true
      example:
        api_key: N2M5ZTY2NzktNzQyNS00MGRlLTk0NGItZTA3ZmMxZjkwYWU3Om15X3NlY3JldF9rZXlfMTIzNDU=
        query: What is diabetes?
        pipeline: graphrag
        parameters:
          top_k: 5

    WebSocketDocumentUploadRequest:
      type: object
      required:
        - api_key
        - operation_id
      properties:
        api_key:
          type: string
          description: Base64-encoded API key (id:secret)
        operation_id:
          type: string
          format: uuid
          description: Document upload operation to monitor
      example:
        api_key: N2M5ZTY2NzktNzQyNS00MGRlLTk0NGItZTA3ZmMxZjkwYWU3Om15X3NlY3JldF9rZXlfMTIzNDU=
        operation_id: b1c2d3e4-5678-90ab-cdef-fedcba987654

    # Server → Client events
    WebSocketEvent:
      type: object
      required:
        - event
        - data
        - timestamp
        - request_id
      properties:
        event:
          type: string
          enum: [query_start, retrieval_progress, generation_chunk, query_complete, error, document_upload_progress]
          description: |
            Event type

            FR-028: JSON-based event streaming protocol
        data:
          type: object
          additionalProperties: true
          description: Event-specific data payload
        timestamp:
          type: string
          format: date-time
          description: Event timestamp (ISO8601)
        request_id:
          type: string
          format: uuid
          description: Request identifier for tracing

    QueryStartEvent:
      allOf:
        - $ref: '#/components/schemas/WebSocketEvent'
        - type: object
          properties:
            event:
              type: string
              enum: [query_start]
            data:
              type: object
              properties:
                query:
                  type: string
                pipeline:
                  type: string
      example:
        event: query_start
        data:
          query: What is diabetes?
          pipeline: graphrag
        timestamp: '2025-10-16T12:34:56.789Z'
        request_id: 550e8400-e29b-41d4-a716-446655440000

    RetrievalProgressEvent:
      allOf:
        - $ref: '#/components/schemas/WebSocketEvent'
        - type: object
          properties:
            event:
              type: string
              enum: [retrieval_progress]
            data:
              type: object
              properties:
                documents_retrieved:
                  type: integer
                total_documents:
                  type: integer
                current_pipeline:
                  type: string
      example:
        event: retrieval_progress
        data:
          documents_retrieved: 5
          total_documents: 10
          current_pipeline: graphrag
        timestamp: '2025-10-16T12:34:57.123Z'
        request_id: 550e8400-e29b-41d4-a716-446655440000

    GenerationChunkEvent:
      allOf:
        - $ref: '#/components/schemas/WebSocketEvent'
        - type: object
          properties:
            event:
              type: string
              enum: [generation_chunk]
            data:
              type: object
              properties:
                chunk:
                  type: string
                  description: Partial answer text (streamed token by token)
                chunk_index:
                  type: integer
                  description: Sequence number for ordering chunks
      example:
        event: generation_chunk
        data:
          chunk: "Diabetes is a chronic"
          chunk_index: 0
        timestamp: '2025-10-16T12:34:58.456Z'
        request_id: 550e8400-e29b-41d4-a716-446655440000

    QueryCompleteEvent:
      allOf:
        - $ref: '#/components/schemas/WebSocketEvent'
        - type: object
          properties:
            event:
              type: string
              enum: [query_complete]
            data:
              $ref: '../query.yaml#/components/schemas/QueryResponse'
      example:
        event: query_complete
        data:
          response_id: 9a8b7c6d-5e4f-3210-9876-543210fedcba
          answer: "Diabetes is a chronic metabolic disorder..."
          retrieved_documents: []
          sources: [medical_textbook_ch5.pdf]
          pipeline_name: graphrag
          execution_time_ms: 1456
        timestamp: '2025-10-16T12:34:59.789Z'
        request_id: 550e8400-e29b-41d4-a716-446655440000

    DocumentUploadProgressEvent:
      allOf:
        - $ref: '#/components/schemas/WebSocketEvent'
        - type: object
          properties:
            event:
              type: string
              enum: [document_upload_progress]
            data:
              type: object
              properties:
                operation_id:
                  type: string
                  format: uuid
                processed_documents:
                  type: integer
                total_documents:
                  type: integer
                progress_percentage:
                  type: number
                  description: |
                    Completion percentage

                    FR-027: System MUST stream document loading progress with percentage
      example:
        event: document_upload_progress
        data:
          operation_id: b1c2d3e4-5678-90ab-cdef-fedcba987654
          processed_documents: 47
          total_documents: 100
          progress_percentage: 47.0
        timestamp: '2025-10-16T12:35:00.123Z'
        request_id: 550e8400-e29b-41d4-a716-446655440000

    ErrorEvent:
      allOf:
        - $ref: '#/components/schemas/WebSocketEvent'
        - type: object
          properties:
            event:
              type: string
              enum: [error]
            data:
              $ref: '../openapi.yaml#/components/schemas/Error'
      example:
        event: error
        data:
          error:
            type: authentication_error
            reason: Invalid API key
            details:
              message: API key not found or invalid
        timestamp: '2025-10-16T12:34:56.789Z'
        request_id: 550e8400-e29b-41d4-a716-446655440000

  # WebSocket Protocol Documentation
  x-websocket-protocol:
    description: |
      WebSocket Streaming Protocol

      Connection Flow:
      1. Client connects to ws://host/api/v1/ws/query
      2. Client sends authentication + query message (WebSocketQueryRequest)
      3. Server validates authentication
      4. Server sends query_start event
      5. Server streams progress events (retrieval_progress, generation_chunk)
      6. Server sends query_complete event with final result
      7. Connection can remain open for additional queries or close

      Heartbeat:
      - Server sends ping every 30 seconds
      - Client responds with pong
      - Idle connections (>5 minutes) automatically closed

      Reconnection:
      - Client can reconnect with same request_id to resume progress updates
      - Server maintains operation state for 5 minutes after disconnect

      Error Handling:
      - Authentication failures → error event + connection close
      - Query failures → error event + connection remains open
      - Timeout → error event + connection close

    connection_lifecycle:
      - connect: Client initiates WebSocket upgrade
      - authenticate: Client sends API key in first message
      - active: Server streams events in real-time
      - idle: No messages for 2+ minutes (server sends ping)
      - disconnect: Client or server closes connection
      - reconnect: Client reconnects with request_id/operation_id

    message_format:
      client_to_server:
        - WebSocketQueryRequest (initiate query)
        - WebSocketDocumentUploadRequest (monitor upload)
        - Pong (heartbeat response)
      server_to_client:
        - QueryStartEvent
        - RetrievalProgressEvent
        - GenerationChunkEvent
        - QueryCompleteEvent
        - DocumentUploadProgressEvent
        - ErrorEvent
        - Ping (heartbeat)
