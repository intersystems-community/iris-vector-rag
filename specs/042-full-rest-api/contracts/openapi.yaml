openapi: 3.1.0
info:
  title: RAG Templates REST API
  version: 1.0.0
  description: |
    Production-grade REST API for RAG (Retrieval-Augmented Generation) pipelines.

    Supports multiple pipeline types:
    - basic: Standard vector similarity search
    - basic_rerank: Vector search with cross-encoder reranking
    - crag: Corrective RAG with self-evaluation
    - graphrag: Hybrid search (vector + text + graph + RRF)
    - pylate_colbert: ColBERT late interaction retrieval

    Authentication: API key-based (Elasticsearch pattern)
    Rate Limiting: Adaptive request concurrency + per-key quotas
    WebSocket Support: Real-time streaming for long-running operations
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://api.example.com/api/v1
    description: Production server

security:
  - ApiKeyAuth: []

paths:
  # Query endpoints
  /basic/_search:
    $ref: './query.yaml#/paths/~1basic~1_search'

  /basic_rerank/_search:
    $ref: './query.yaml#/paths/~1basic_rerank~1_search'

  /crag/_search:
    $ref: './query.yaml#/paths/~1crag~1_search'

  /graphrag/_search:
    $ref: './query.yaml#/paths/~1graphrag~1_search'

  /pylate_colbert/_search:
    $ref: './query.yaml#/paths/~1pylate_colbert~1_search'

  /_search:
    $ref: './query.yaml#/paths/~1_search'

  # Pipeline management endpoints
  /pipelines:
    $ref: './pipeline.yaml#/paths/~1pipelines'

  /pipelines/{pipeline_type}:
    $ref: './pipeline.yaml#/paths/~1pipelines~1{pipeline_type}'

  # Document upload endpoints
  /documents:
    $ref: './document.yaml#/paths/~1documents'

  /documents/{operation_id}:
    $ref: './document.yaml#/paths/~1documents~1{operation_id}'

  # Health endpoint
  /health:
    get:
      summary: Health check endpoint
      description: |
        Returns health status of all system components.

        FR-032: System MUST provide health check endpoint reporting overall system status
        FR-033: System MUST report status of all dependencies (IRIS database, Redis cache, LLM services)
        FR-034: System MUST expose metrics for request count, latency, error rates, and resource usage
      operationId: getHealth
      tags:
        - Health
      security: []  # No authentication required
      responses:
        '200':
          description: System health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
              example:
                status: healthy
                timestamp: '2025-10-16T12:34:56.789Z'
                components:
                  iris_database:
                    status: healthy
                    response_time_ms: 12
                  redis_cache:
                    status: healthy
                    response_time_ms: 5
                  graphrag_pipeline:
                    status: healthy
                    response_time_ms: 8
                overall_health: healthy

  # WebSocket endpoint (see websocket.yaml for event schemas)
  /ws/query:
    $ref: './websocket.yaml#/paths/~1ws~1query'

components:
  securitySchemes:
    $ref: './auth.yaml#/components/securitySchemes'

  schemas:
    # Import schemas from separate files
    QueryRequest:
      $ref: './query.yaml#/components/schemas/QueryRequest'

    QueryResponse:
      $ref: './query.yaml#/components/schemas/QueryResponse'

    PipelineInfo:
      $ref: './pipeline.yaml#/components/schemas/PipelineInfo'

    DocumentUploadRequest:
      $ref: './document.yaml#/components/schemas/DocumentUploadRequest'

    DocumentUploadResponse:
      $ref: './document.yaml#/components/schemas/DocumentUploadResponse'

    HealthStatus:
      type: object
      required:
        - status
        - timestamp
        - components
        - overall_health
      properties:
        status:
          type: string
          enum: [healthy, degraded, unavailable]
          description: Overall system status
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp (ISO8601)
        components:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ComponentHealth'
          description: Status of individual components
        overall_health:
          type: string
          enum: [healthy, degraded, unavailable]
          description: Aggregated health status

    ComponentHealth:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [healthy, degraded, unavailable]
        response_time_ms:
          type: integer
          minimum: 0
        version:
          type: string
        error_message:
          type: string
        metrics:
          type: object
          additionalProperties: true

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - type
            - reason
          properties:
            type:
              type: string
              description: Error type classification
              example: validation_exception
            reason:
              type: string
              description: Human-readable error message
              example: Invalid query parameter
            details:
              type: object
              additionalProperties: true
              description: Additional error context
              example:
                field: top_k
                rejected_value: -5
                message: Must be positive integer

  parameters:
    XRequestID:
      name: X-Request-ID
      in: header
      description: Unique request identifier for tracing
      schema:
        type: string
        format: uuid
      required: false

  headers:
    X-Request-ID:
      description: Unique request identifier for tracing
      schema:
        type: string
        format: uuid
      example: 550e8400-e29b-41d4-a716-446655440000

    X-Pipeline-Name:
      description: Which pipeline processed the request
      schema:
        type: string
      example: graphrag

    X-Execution-Time-Ms:
      description: Query execution time in milliseconds
      schema:
        type: integer
        minimum: 0
      example: 1456

    X-RateLimit-Limit:
      description: Maximum requests allowed in time window
      schema:
        type: integer
        minimum: 1
      example: 100

    X-RateLimit-Remaining:
      description: Remaining requests in current time window
      schema:
        type: integer
        minimum: 0
      example: 73

    X-RateLimit-Reset:
      description: Time when rate limit window resets (Unix timestamp)
      schema:
        type: integer
      example: 1697461200

    Retry-After:
      description: Seconds to wait before retrying (for 429 responses)
      schema:
        type: integer
        minimum: 1
      example: 60

tags:
  - name: Query
    description: Query RAG pipelines for answers
  - name: Pipeline
    description: Manage RAG pipeline lifecycle
  - name: Document
    description: Upload and index documents
  - name: Health
    description: System health monitoring
  - name: WebSocket
    description: Real-time streaming via WebSocket
